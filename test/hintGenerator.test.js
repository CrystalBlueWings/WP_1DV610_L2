import HintGenerator from '../src/hintGenerator.js'

describe('HintGenerator', () => {
  let hintGen // Variable to hold the instance of HintGenerator for testing.

  beforeEach(() => {
    // Initialize a sample Sudoku grid for testing (generated by ChatGPT).
    const grid = [
      [5, 3, null, null, 7, null, null, null, null],
      [6, null, null, 1, 9, 5, null, null, null],
      [null, 9, 8, null, null, null, null, 6, null],
      [8, null, null, null, 6, null, null, null, 3],
      [4, null, null, 8, null, 3, null, null, 1],
      [7, null, null, null, 2, null, null, null, 6],
      [null, 6, null, null, null, null, 2, 8, null],
      [null, null, null, 4, 1, 9, null, null, 5],
      [null, null, null, null, 8, null, null, 7, 9]
    ]

    hintGen = new HintGenerator(grid) // Create an instance of HintGenerator with the grid.
  })

  test('should return a valid hint for a specific cell', () => {
    const hint = hintGen.getHintForCell(0, 2) // Get hint for cell (0, 2).
    expect(hint).toBe(1) // Verify that the correct hint is returned for that cell.
  })

  test('should return null for a non-empty cell', () => {
    const hint = hintGen.getHintForCell(0, 0) // Try to get a hint for a filled cell.
    expect(hint).toBeNull() // Since the cell is not empty, it should return null.
  })

  test('should return cells with fewest candidates', () => {
    const cells = hintGen.getCellsWithFewestCandidates(1)
    expect(cells.length).toBeGreaterThan(0)
    expect(cells[0].candidates.length).toBeGreaterThan(0)
  })

  test('should return cells with most candidates', () => {
    const cells = hintGen.getCellsWithMostCandidates(1)
    expect(cells.length).toBeGreaterThan(0)
    expect(cells[0].candidates.length).toBeGreaterThan(0)
  })

  test('should return the easiest box', () => {
    const easiestBox = hintGen.getEasiestBox()
    expect(easiestBox).toHaveProperty('boxRow')
    expect(easiestBox).toHaveProperty('boxCol')
  })
})
