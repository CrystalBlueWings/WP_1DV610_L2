import SudokuGrid from '../src/sudokuGrid.js'

describe('SudokuGrid', () => {
  let grid // Variable to hold the instance of the SudokuGrid for testing.

  beforeEach(() => {
    // Initialize a sample Sudoku grid for testing (generated by ChatGPT).
    grid = new SudokuGrid([
      [5, 3, null, null, 7, null, null, null, null],
      [6, null, null, 1, 9, 5, null, null, null],
      [null, 9, 8, null, null, null, null, 6, null],
      [8, null, null, null, 6, null, null, null, 3],
      [4, null, null, 8, null, 3, null, null, 1],
      [7, null, null, null, 2, null, null, null, 6],
      [null, 6, null, null, null, null, 2, 8, null],
      [null, null, null, 4, 1, 9, null, null, 5],
      [null, null, null, null, 8, null, null, 7, 9]
    ])
  })

  test('should find the first empty position', () => {
    const emptyPosition = grid.findEmptyPosition() // Find the first empty cell in the grid.
    expect(emptyPosition).toEqual({ row: 0, col: 2 }) // The first empty cell should be at position (0, 2).
  })

  test('should check if a cell is empty', () => {
    expect(grid.isCellEmpty(0, 2)).toBe(true) // Cell (0, 2) should be empty.
    expect(grid.isCellEmpty(0, 0)).toBe(false) // Cell (0, 0) should not be empty.
  })

  test('should place a number in the grid', () => {
    grid.placeNumber(0, 2, 4) // Place the number 4 in the empty cell (0, 2).
    expect(grid.isCellEmpty(0, 2)).toBe(false) // Check that the cell is no longer empty.
    expect(grid.sudokuGrid[0][2]).toBe(4) // Check that the number 4 is placed correctly in cell (0, 2).
  })

  test('should remove a number from the grid', () => {
    grid.placeNumber(0, 2, 4) // Place the number 4 in cell (0, 2).
    grid.removeNumber(0, 2) // Remove the number from cell (0, 2).
    expect(grid.isCellEmpty(0, 2)).toBe(true) // Check that the cell is empty again.
    expect(grid.sudokuGrid[0][2]).toBe(null) /// Verify that the number was removed from cell (0, 2).
  })

  test('should check if a number can be placed in a cell', () => {
    expect(grid.checkIfCanPlaceNumber(0, 2, 4)).toBe(true) // Verify that number 4 can be placed in cell (0, 2) according to Sudoku rules.
    expect(grid.checkIfCanPlaceNumber(0, 2, 5)).toBe(false) // Verify that number 5 cannot be placed in cell (0, 2) because it already exists in the row, column, or box.
  })
})
